---
swagger: "2.0"
info:
  description: "This is a order lunch server for everyone worked at Ginnovation.\n\
    APIs are writed by swagger\n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).\n"
  version: "1.0.0"
  title: "Order Lunch Ginno"
  termsOfService: "https://ginno.com/"
  contact:
    email: "apiteam@ginno.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/truongginno/OrderLunchGinno/1.0.0"
tags:
- name: "order"
  description: "Order lunch easy and always have perfect meals"
  externalDocs:
    description: "Find out more"
    url: "http://ginno.lunch.com"
schemes:
- "https"
- "http"
paths:
  /order:
    post:
      tags:
      - "order"
      summary: "Add a new order to the server"
      operationId: "addOrder"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Order object that needs to be added to the server"
        required: true
        schema:
          $ref: "#/definitions/Order"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "Success"
        "405":
          description: "Invalid input"
      security:
      - order_auth:
        - "write:orders"
        - "read:orders"
  /order/getList:
    get:
      tags:
      - "order"
      summary: "Get list order"
      description: "Choose time to show list order"
      operationId: "getListOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "time"
        in: "query"
        description: "time values that need to be considered for filter"
        required: true
        type: "string"
        items: {}
        collectionFormat: "multi"
        x-exportParamName: "Time"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Invalid status value"
      security:
      - order_auth:
        - "write:orders"
        - "read:orders"
  /order/getTotal:
    get:
      tags:
      - "order"
      summary: "Get total order"
      description: "Get total order by status order and time"
      operationId: "getTotalOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Orders are filtered by status values"
        required: true
        type: "array"
        items:
          type: "string"
          default: "ordered"
          enum:
          - "ordered"
          - "paided"
        collectionFormat: "multi"
        x-exportParamName: "Status"
      - name: "time"
        in: "query"
        description: "Orders are filtered by time values"
        required: true
        type: "string"
        items: {}
        collectionFormat: "multi"
        x-exportParamName: "Time"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Invalid tag value"
      security:
      - order_auth:
        - "write:orders"
        - "read:orders"
  /order/{orderId}:
    get:
      tags:
      - "order"
      summary: "Find order by ID"
      description: "Returns a single order"
      operationId: "getOrderById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order to return"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrderId"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
      security:
      - api_key: []
    put:
      tags:
      - "order"
      summary: "Updates a order"
      operationId: "updateOrder"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrderId"
      - name: "name"
        in: "formData"
        description: "Updated name of the order"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "status"
        in: "formData"
        description: "Updated status of the order"
        required: false
        type: "string"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      responses:
        "405":
          description: "Invalid input"
      security:
      - order_auth:
        - "write:orders"
        - "read:orders"
    delete:
      tags:
      - "order"
      summary: "Deletes a order"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        x-exportParamName: "ApiKey"
        x-optionalDataType: "String"
      - name: "orderId"
        in: "path"
        description: "Order id to delete"
        required: true
        type: "integer"
        format: "int64"
        x-exportParamName: "OrderId"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
      security:
      - order_auth:
        - "write:orders"
        - "read:orders"
  /dish:
    post:
      tags:
      - "dish"
      summary: "Create dish"
      description: "Add new dish to menu"
      operationId: "createDish"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created dish object"
        required: true
        schema:
          $ref: "#/definitions/Dish"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /dish/getList:
    get:
      tags:
      - "dish"
      summary: "Returns dish list"
      description: "Returns dish list from server"
      operationId: "getListDish"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Dish"
      security:
      - api_key: []
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        x-exportParamName: "Body"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
        x-exportParamName: "Password"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        "400":
          description: "Invalid username/password supplied"
securityDefinitions:
  order_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:orders: "modify orders in your account"
      read:orders: "read your orders"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      dishId:
        type: "integer"
        format: "int64"
      orderDate:
        type: "string"
        format: "date-time"
      quantity:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "ordered"
        - "paided"
    xml:
      name: "Order"
    example:
      quantity: 5
      dishId: 1
      id: 0
      userId: 6
      orderDate: "2000-01-23T04:56:07.000+00:00"
      status: "ordered"
  Dish:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      price:
        type: "integer"
        format: "int64"
        description: "price of dish"
    xml:
      name: "Dish"
    example:
      price: 6
      name: "name"
      id: 0
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "string"
        description: "User Status"
        enum:
        - "online"
        - "away"
        - "doNotDisturb"
        - "offline"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
