/*
 * Order Lunch Ginno
 *
 * This is a order lunch server for everyone worked at Ginnovation. APIs are writed by swagger [http://swagger.io](http://swagger.io) or on  [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * API version: 1.0.0
 * Contact: apiteam@ginno.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"strconv"
	"time"

	"github.com/gorilla/mux"
)

// AddOrder AddOrder
func AddOrder(w http.ResponseWriter, r *http.Request) {
	var o Order
	decoder := json.NewDecoder(r.Body)
	if err := decoder.Decode(&o); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	defer r.Body.Close()

	if err := o.addOrder(AppObj.DB); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}

	respondWithJSON(w, http.StatusCreated, o)
}

// DeleteOrder DeleteOrder
func DeleteOrder(w http.ResponseWriter, r *http.Request) {
	// get Id from json request
	vars := mux.Vars(r)
	id, err := strconv.Atoi(vars["id"])
	if err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid Order ID")
		return
	}

	o := Order{ID: id}
	if err := o.deleteOrder(AppObj.DB); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJSON(w, http.StatusOK, map[string]string{"result": "success"})
}

// UpdateOrder UpdateOrder
func UpdateOrder(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.Atoi(vars["id"])
	if err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid Order ID")
		return
	}

	// transfer request to order object
	var o Order
	decoder := json.NewDecoder(r.Body)
	if err := decoder.Decode(&o); err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	defer r.Body.Close()

	o.ID = id

	if err := o.updateOrder(AppObj.DB); err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}
	respondWithJSON(w, http.StatusOK, o)
}

// GetOrderByID GetOrderById
func GetOrderByID(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, err := strconv.Atoi(vars["id"])
	if err != nil {
		respondWithError(w, http.StatusBadRequest, "Invalid Order ID")
		return
	}

	o := Order{ID: id}
	if err := o.getOrderByID(AppObj.DB); err != nil {
		switch err {
		case sql.ErrNoRows:
			respondWithError(w, http.StatusNotFound, "Order not found")
		default:
			respondWithError(w, http.StatusInternalServerError, err.Error())
		}
		return
	}

	respondWithJSON(w, http.StatusOK, o)
}

// GetListOrder GetListOrder
func GetListOrder(w http.ResponseWriter, r *http.Request) {
	orders, err := getListOrder(AppObj.DB, time.Now())
	if err != nil {
		respondWithError(w, http.StatusInternalServerError, err.Error())
		return
	}

	respondWithJSON(w, http.StatusOK, orders)
}

// GetTotalOrder GetTotalOrder
func GetTotalOrder(w http.ResponseWriter, r *http.Request) {
	respondWithError(w, http.StatusNotFound, "Order not found")
}
